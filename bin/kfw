#!/usr/bin/env bash

set -e

DIR="$(dirname "$0")/.."

PUBLIC_KEY_PATH=~/.ssh/id_rsa.pub
PRIVATE_KEY_PATH=~/.ssh/id_rsa
LOCAL_SSH_PORT=10022

SERVICE_BACKING_PORT_ON_POD=8080
LOCAL_SERVER_PORT=8000
NAMESPACE=default

SERVICE_PORT=80
LOCAL_SERVICE_PORT=8080

error()
{
  echo "Error: $@" >&2
  exit 1
}

split()
{
  eval $1='( ${3/$2/ })'
}

addLabel()
{
  local a
  split a = "$2"
  if [ ${#a[@]} -ne 2 ]; then
    error "invalid key/value pair: $1"
  fi
  eval $1'["${a[0]}"]="${a[1]}"'
}

escapeNL()
{
  if [ $# -gt 0 ]; then
    sed -E ':a;N;$!ba;s/\r{0,1}\n/\\n/g' <<<"$*"
  else
    sed -E ':a;N;$!ba;s/\r{0,1}\n/\\n/g' 
  fi
}

subst()
{
  local args=
  local a
  for a in "$@"; do
    args="$args -e 's;__${a}__;$(escapeNL "${!a}");g'"
  done
  eval sed "$args"
}

deploymentReady()
{
  local r
  r="$(kubectl -n "$1" get deploy "$2" -ojsonpath="{.status.readyReplicas}")"
  if [ -z "$r" ]; then
    false
  else
    [ $r -gt 0 ]
  fi
}

declare -A labels

usage()
{
    cat <<EOM
Usage:
Runs local webhook on remote ssh server for service

kfw [<cmd>][-d] [-n <namespace>] [--ssh-port <port>] [-s <service>[:<port>][-r <port>] [-l <port>] [--public-key -c <port> <path>]

Commands:
    service   deploys a proxy service into a kubernetes cluster and forwards
              incoming requests to a server of localhost (default command)
    client    establish a port forwarding for a service usable to locally
              call the service by a local client
    server    start a local test server for serving http requests

Options:
    -n <namespace>         kubernetes namespace to deploy sshd & service ($NAMESPACE)
    --ssh-port <port>      local ssh port ($LOCAL_SSH_PORT)
    -s <service>[:<port>]  kuberneets service and optional port ($SERVICE:$SERVICE_PORT)
    -r <port>              service backing port on pod ($SERVICE_BACKING_PORT_ON_POD)
    -l <port>              local server port ($LOCAL_SERVER_PORT)
    --label <key>=<value>  label(s) for pod ($LABELS)
    --public-key <path>    path to ssh public key ($PUBLIC_KEY_PATH)
    --private-key <path>   path to ssh provate key ($PRIVATE_KEY_PATH)
    --kubeconfig <path>    path to kubeconfig ($KUBECONFIG)
    -c <port>              local service port for client mode ($LOCAL_SERVICE_PORT)
    -d                     delete kubernetes deployment

Example: bin/kfw service -n extension-foo-bar 
EOM
}

if [ $# -eq 0 ]; then
  usage
  exit 0
fi

cmd=service
case "$1" in
  service|client|server) cmd=$1
                         shift;;
  help|-h|--help) usage
                  exit 0;;
esac

for l in $LABELS; do
  addLabel labels "$l"
done

while [ "$1" != "" ]; do
    case $1 in
        -n )   shift
               NAMESPACE=$1
               shift
               ;;
        -r )   shift
               SERVICE_BACKING_PORT_ON_POD=$1
               shift
               ;;
        -l )   shift
               LOCAL_SERVER_PORT=$1
               LOCAL_SERICE_PORT=$1
               shift;;
        -s )   shift
               split a : "$1"
               SERVICE="${a[0]}"
               if [ $# -gt 1 ]; then
                 SERVICE_PORT="${a[1]}"
               fi
               shift;;
        -d )   shift
               DELETE=true
               ;;
        --kubeconfig)   shift
                        export KUBECONFIG="$1"
                        shift
                        ;;
        --ssh-port )    shift
                        LOCAL_SSH_PORT=$1
                        shift
                        ;;
        --label )       shift
                        addLabel labels $1
                        shift
                        ;;
        --public-key )  shift
                        PUBLIC_KEY_PATH=$1
                        shift
                        ;;
        --private-key )  shift
                        PRIVATE_KEY_PATH=$1
                        shift
                        ;;
        * )             echo "Error: invalid argument '$1'" >&2
                        usage
                        exit 1
    esac
done

if [ "$cmd" != server ]; then
  if [ -z "$KUBECONFIG" ]; then
    error kubeconfig not set
  fi
  if [ ! -f "$KUBECONFIG" ]; then
    error "kubeconfig '$KUBECONFIG' not found"
  fi
fi

LABELS="$(
  for k in "${!labels[@]}"; do
    echo "        $k: \"${labels["$k"]}\""
  done
)"
AUTHORIZED_KEYS="$(cat "$PUBLIC_KEY_PATH")"

manifest="$(cat "$DIR/rsshd.yaml" | subst LABELS NAMESPACE AUTHORIZED_KEYS )"

trapHandler()
{
  if [ -n "$PID_PORT_FORWARD" ]; then
    kill $PID_PORT_FORWARD || true
  fi
  exit 64
}

trap trapHandler SIGINT SIGTERM EXIT


delete()
{
  kubectl delete -f - <<<"$manifest"
}

create()
{
  kubectl apply -f - <<<"$manifest"

  while ! deploymentReady "$NAMESPACE" rsshd; do
    sleep 1
  done

  kubectl -n "$NAMESPACE" port-forward svc/rsshd-ssh $LOCAL_SSH_PORT:2222 &
  PID_PORT_FORWARD=$!

  ssh-keygen -R '[localhost]:'$LOCAL_SSH_PORT >/dev/null 2>&1 || true

  while ! nc -vz localhost $LOCAL_SSH_PORT > /dev/null 2>&1; do
    sleep 1
  done

  echo "opening tunnel $SERVICE_BACKING_PORT_ON_POD:localhost:$LOCAL_SERVER_PORT"
  ssh -i "$PRIVATE_KEY_PATH" -p $LOCAL_SSH_PORT -R $SERVICE_BACKING_PORT_ON_POD:localhost:$LOCAL_SERVER_PORT -o ServerAliveInterval=60 -o StrictHostKeyChecking=false app@localhost watch -t date -Iseconds > /dev/null
}

service()
{
  if [ "$DELETE" == "true" ]; then
    delete
  else
    create
  fi
}

client()
{
  echo "starting port forward $NAMESPACE/svc/$SERVICE $LOCAL_SERVICE_PORT:$SERVICE_PORT"

  if [ -z "$SERVICE" ]; then
    error "service name must be specified with option -s"
  fi

  kubectl -n "$NAMESPACE" port-forward svc/$SERVICE $LOCAL_SERVICE_PORT:$SERVICE_PORT
}

server()
{
  while true ; do  echo -e "HTTP/1.1 200 OK\n\n $(date)" | nc -l -p ${LOCAL_SERVER_PORT}  ; done
}

$cmd
